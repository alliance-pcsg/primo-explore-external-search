{"version":3,"file":"extsearch.js","sources":["../src/extsearch/directive.js","../src/extsearch/mappings.js","../src/extsearch/targets.js","../src/module.js"],"sourcesContent":["export default ['externalSearchTargets', externalSearchTargets => ({\n    require: '^^prmFacet',\n    restrict: 'E',\n    link: (scope, element, attrs, prmFacetCtrl) => {\n        console.log(prmFacetCtrl.facets)\n        prmFacetCtrl.facets.splice(parseInt(attrs.index), 0, {\n            name: 'External Results',\n            displayedType: 'exact',\n            limitCount: 0,\n            facetGroupCollapsed: false,\n            values: [\n                {\n                    displayValue: 'WorldCat',\n                    name: 'External Results',\n                    value: 'WorldCat',\n                    count: 650,\n                },\n            ],\n        })\n    },\n})]\n","export const worldcat = {\n    'any': 'kw',\n    'title': 'ti',\n    'creator': 'au',\n    'subject': 'su',\n    'isbn': 'bn',\n    'issn': 'n2',\n}\n","import { worldcat } from './mappings'\n\nexport default {\n    worldcat (queries, filters) {\n        try {\n            return 'queryString=' + queries.map(part => {\n                let terms = part.split(',')\n                let type = worldcat[terms[0]] || 'kw'\n                let string = terms[2] || ''\n                let join = terms[3] || ''\n                return type + ':' + string + ' ' + join + ' '\n            }).join('')\n        } catch (e) {\n            return ''\n        }\n    },\n\n    gscholar (queries, filters) {\n        try {\n            return queries.map(part => part.split(',')[2] || '').join(' ')\n        } catch (e) {\n            return ''\n        }\n    },\n}\n","import angular from 'angular'\n\nimport directive from './extsearch/directive'\nimport targets from './extsearch/targets'\n\nexport default angular\n    .module('externalSearch', [])\n    .value('externalSearchTargets', targets)\n    .directive('externalSearch', directive)\n"],"names":["externalSearchTargets","require","restrict","link","scope","element","attrs","prmFacetCtrl","console","log","facets","splice","parseInt","index","name","displayedType","limitCount","facetGroupCollapsed","values","displayValue","value","count","worldcat","queries","filters","map","part","terms","split","type","string","join","e","gscholar","angular","module","targets","directive"],"mappings":";;;;;AAAA,oBAAe,CAAC,uBAAD,EAA0B,UAAAA,qBAAqB;IAAA,SAAK;IAC/DC,IAAAA,OAAO,EAAE,YADsD;IAE/DC,IAAAA,QAAQ,EAAE,GAFqD;IAG/DC,IAAAA,IAAI,EAAE,cAACC,KAAD,EAAQC,OAAR,EAAiBC,KAAjB,EAAwBC,YAAxB,EAAyC;IAC3CC,MAAAA,OAAO,CAACC,GAAR,CAAYF,YAAY,CAACG,MAAzB;IACAH,MAAAA,YAAY,CAACG,MAAb,CAAoBC,MAApB,CAA2BC,QAAQ,CAACN,KAAK,CAACO,KAAP,CAAnC,EAAkD,CAAlD,EAAqD;IACjDC,QAAAA,IAAI,EAAE,kBAD2C;IAEjDC,QAAAA,aAAa,EAAE,OAFkC;IAGjDC,QAAAA,UAAU,EAAE,CAHqC;IAIjDC,QAAAA,mBAAmB,EAAE,KAJ4B;IAKjDC,QAAAA,MAAM,EAAE,CACJ;IACIC,UAAAA,YAAY,EAAE,UADlB;IAEIL,UAAAA,IAAI,EAAE,kBAFV;IAGIM,UAAAA,KAAK,EAAE,UAHX;IAIIC,UAAAA,KAAK,EAAE;IAJX,SADI;IALyC,OAArD;IAcH;IAnB8D,GAAL;IAAA,CAA/C,CAAf;;ICAO,IAAMC,QAAQ,GAAG;IACpB,SAAO,IADa;IAEpB,WAAS,IAFW;IAGpB,aAAW,IAHS;IAIpB,aAAW,IAJS;IAKpB,UAAQ,IALY;IAMpB,UAAQ;IANY,CAAjB;;ACEP,kBAAe;IACXA,EAAAA,QADW,uBACDC,OADC,EACQC,OADR,EACiB;IACxB,QAAI;IACA,aAAO,iBAAiBD,OAAO,CAACE,GAAR,CAAY,UAAAC,IAAI,EAAI;IACxC,YAAIC,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,CAAZ;IACA,YAAIC,IAAI,GAAGP,QAAQ,CAACK,KAAK,CAAC,CAAD,CAAN,CAAR,IAAsB,IAAjC;IACA,YAAIG,MAAM,GAAGH,KAAK,CAAC,CAAD,CAAL,IAAY,EAAzB;IACA,YAAII,IAAI,GAAGJ,KAAK,CAAC,CAAD,CAAL,IAAY,EAAvB;IACA,eAAOE,IAAI,GAAG,GAAP,GAAaC,MAAb,GAAsB,GAAtB,GAA4BC,IAA5B,GAAmC,GAA1C;IACH,OANuB,EAMrBA,IANqB,CAMhB,EANgB,CAAxB;IAOH,KARD,CAQE,OAAOC,CAAP,EAAU;IACR,aAAO,EAAP;IACH;IACJ,GAbU;IAeXC,EAAAA,QAfW,oBAeDV,OAfC,EAeQC,OAfR,EAeiB;IACxB,QAAI;IACA,aAAOD,OAAO,CAACE,GAAR,CAAY,UAAAC,IAAI;IAAA,eAAIA,IAAI,CAACE,KAAL,CAAW,GAAX,EAAgB,CAAhB,KAAsB,EAA1B;IAAA,OAAhB,EAA8CG,IAA9C,CAAmD,GAAnD,CAAP;IACH,KAFD,CAEE,OAAOC,CAAP,EAAU;IACR,aAAO,EAAP;IACH;IACJ;IArBU,CAAf;;ACGA,mBAAeE,OAAO,CACjBC,MADU,CACH,gBADG,EACe,EADf,EAEVf,KAFU,CAEJ,uBAFI,EAEqBgB,OAFrB,EAGVC,SAHU,CAGA,gBAHA,EAGkBA,SAHlB,CAAf;;;;;;;;"}